# -*- coding: utf-8 -*-
"""
Created on Mon Mar 21 10:53:09 2016

@author: r.viroux
"""

#Exercice 1

#Compter le nombre de chaine de caractère plus grande que 2 sans boucle
def match_ends(words):
    test=sum(1 for i in words if (len(i) >= 2))
    print test
    return
    
match_ends(["a","aaa","bbb","abc"])

#Compter le nombre de chaine de caractère plus grande que 2 avec la condition
def match_ends(words):
    test = 0
    for i in range(len(words)):
        test+=((len(words[i]) >= 2 and words[i][0]==words[i][-1]))
    print test
    return test
    
match_ends(["a","aaa","bbb","abc","a"])

#Ok 


#Exercice 2

def front_x(words):
    listx=[]
    listy=[]
    for i in range(len(words)):
        if words[i][0].lower()=="x":
            listx=[words[i]] + listx
        else:
            listy.append(words[i])
    listy.sort()
    listtot=listx+listy
    print listx
    print listtot
    return listtot
    
front_x(['mix', 'xyz', 'apple', 'xanadu', 'aardvark'])

#Ok 


#Exercice 3.1
def sort_last(tuples):
    tuples_sort=sorted(tuples, key=lambda x: x[len(x)-1])   
    print tuples_sort    
    return
    
sort_last([(1, 7), (1, 3), (3, 4, 5), (2, 2)])

#Exercice 3.2
def test(got, expected):
    prefix = 'OK' if got == expected else ' X'
    # !r prints a Python representation of the strings (complete with quotes)
    print ' {} got: {!r} expected: {!r}'.format(prefix, got, expected)

test("a","b")
test("a","a")

#Exercice 3.3

def main():
    print 'match_ends'
    test(match_ends(['aba', 'xyz', 'aa', 'x', 'bbb']), 3)
    test(match_ends(['', 'x', 'xy', 'xyx', 'xx']), 2)
    test(match_ends(['aaa', 'be', 'abc', 'hello']), 1)

    print
    print 'front_x'
    test(front_x(['bbb', 'ccc', 'axx', 'xzz', 'xaa']),
        ['xaa', 'xzz', 'axx', 'bbb', 'ccc'])
    test(front_x(['ccc', 'bbb', 'aaa', 'xcc', 'xaa']),
        ['xaa', 'xcc', 'aaa', 'bbb', 'ccc'])
    test(front_x(['mix', 'xyz', 'apple', 'xanadu', 'aardvark']),
        ['xanadu', 'xyz', 'aardvark', 'apple', 'mix'])

main()

#Exo validés


#Exercice 4

def remove_adjacent(nums):
    ran=range(len(nums))
    if len(ran) >= 2:
        del(ran[0])
    ran.sort(reverse=True) 
    for i in ran:
        if len(nums) <= 1:
            break
        if nums[i]==nums[i-1]:
            del(nums[i])
    print nums
    return nums
    
remove_adjacent( [1, 2, 2, 3])

#Exercice 5
def linear_merge_nodupkey(list1, list2):
    l1=0
    l2=0
    tour=0
    listf=[]
    list1=remove_adjacent(list1)
    list2=remove_adjacent(list2)
    while l1 < len(list1) and l2< len(list2):
        tour+=1
        print "Tour "+ str(tour )
        print "  l1 vaut "+ str(l1 )
        print "  l2 vaut "+ str(l2)
        if list1[l1]==list2[l2]:
            listf.append(list1[l1])
            l1+=1
            l2+=1
        else:
            if list1[l1]<=list2[l2]:
                listf.append(list1[l1])
                l1+=1
            else:
                listf.append(list2[l2])
                l2+=1
        print "  l1 vaut "+ str(l1 )
        print "  l2 vaut "+ str(l2)
        if l1 > len(list1)-1:
            listf.extend(list2[l2:])
        elif l2 > len(list2)-1:
            listf.extend(list1[l1:])
    print "listf =" + str(listf)
    return listf
    
linear_merge_nodupkey([1, 2, 2, 3, 4], [1, 2, 3, 5])

def linear_merge(list1, list2):
    l1=0
    l2=0
    tour=0
    listf=[]
    while l1 < len(list1) and l2< len(list2):
        tour+=1
        print "Tour "+ str(tour )
        print "  l1 vaut "+ str(l1 )
        print "  l2 vaut "+ str(l2)
        if list1[l1]<=list2[l2]:
            listf.append(list1[l1])
            l1+=1
        else:
            listf.append(list2[l2])
            l2+=1
        print "  l1 vaut "+ str(l1 )
        print "  l2 vaut "+ str(l2)
        if l1 > len(list1)-1:
            listf.extend(list2[l2:])
        elif l2 > len(list2)-1:
            listf.extend(list1[l1:])
    print "listf =" + str(listf)
    return listf
    
linear_merge([1, 2, 2, 3, 4], [1, 2, 3, 5])

#Validation
def main():
    print 'remove_adjacent'
    test(remove_adjacent([1, 2, 2, 3]), [1, 2, 3])
    test(remove_adjacent([2, 2, 3, 3, 3]), [2, 3])
    test(remove_adjacent([]), [])

    print
    print 'linear_merge'
    test(linear_merge(['aa', 'xx', 'zz'], ['bb', 'cc']),
        ['aa', 'bb', 'cc', 'xx', 'zz'])
    test(linear_merge(['aa', 'xx'], ['bb', 'cc', 'zz']),
        ['aa', 'bb', 'cc', 'xx', 'zz'])
    test(linear_merge(['aa', 'aa'], ['aa', 'bb', 'bb']),
        ['aa', 'aa', 'aa', 'bb', 'bb'])
        
main()

#Ok mais pas optimisé
